// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Barbershop {
  id            String @id @default(uuid())
  name          String
  email         String
  password_hash String
  contact_name  String
  contact_phone String

  Booking      Booking[]
  Professional Professional[]
  Service      Service[]
  Client       Client[]
}

model Professional {
  id    String @id @default(uuid())
  name  String
  email String
  phone String
  cpf   String

  barbershop   Barbershop   @relation(fields: [barbershopId], references: [id])
  barbershopId String       @map("barbershop_id")
  Booking      Booking[]
  Commission   Commission[]

  @@map("professionals")
}

model Service {
  id                   String @id @default(uuid())
  name                 String
  priceInCents         Int    @map("price_in_cents")
  description          String
  durationInMinutes    Int    @map("duration_in_minutes")
  commissionPercentage Float  @default(0) @map("commission_percentage")

  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])
  barbershopId String     @map("barbershop_id")
  Booking      Booking[]

  @@map("services")
}

model Client {
  id    String @id @default(uuid())
  name  String
  phone String @unique

  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])
  barbershopId String     @map("barbershop_id")
  Booking      Booking[]

  @@map("clients")
}

model Booking {
  id             String   @id @default(uuid())
  startDate      DateTime @map("start_date")
  endDate        DateTime @map("end_date")
  createdAt      DateTime @default(now()) @map("created_at")
  barbershopId   String   @map("barbershop_id")
  clientId       String   @map("client_id")
  serviceId      String   @map("service_id")
  professionalId String   @map("professional_id")
  observations   String?
  status         String

  professional Professional @relation(fields: [professionalId], references: [id])
  service      Service      @relation(fields: [serviceId], references: [id])
  barbershop   Barbershop   @relation(fields: [barbershopId], references: [id])
  client       Client       @relation(fields: [clientId], references: [id])
  Payment      Payment[]

  @@map("bookings")
}

model Payment {
  id           String   @id @default(uuid())
  date         DateTime
  valueInCents Int      @map("value_in_cents")
  method       String
  bookingId    String   @map("booking_id")

  booking    Booking      @relation(fields: [bookingId], references: [id])
  Commission Commission[]

  @@map("payments")
}

model Commission {
  id                     String   @id @default(uuid())
  commissionPercentage   Float    @map("commission_percentage")
  commissionValueInCents Int      @map("commission_value_in_cents")
  date                   DateTime
  professionalId         String   @map("professional_id")
  paymentId              String   @map("payment_id")

  payment      Payment      @relation(fields: [paymentId], references: [id])
  professional Professional @relation(fields: [professionalId], references: [id])

  @@map("commissions")
}
